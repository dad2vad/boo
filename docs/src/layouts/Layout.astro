---
import Sidebar from '../components/Sidebar.astro'
import CurrentLinkHighlight from '../components/CurrentLinkHighlight.astro'
import HeadingCopyButton from '../components/HeadingCopyButton.astro'
import Glitch from '../components/Glitch.astro'

const {
  frontmatter: { title = '404', description } = {} as Record<string, string>,
} = Astro.props
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    {description ? <meta name="description" content={description} /> : null}
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="stylesheet" href="/styles/chromo.css" />
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Roboto&family=Roboto+Mono&display=swap');
    </style>
  </head>
  <body class="mono-all">
    <Sidebar />
    <main>
      <h1>{title}</h1>
      <slot />
      <footer>
        <a href="https://github.com/artalar/reatom" target="_blank">github</a>
      </footer>
    </main>
    <script>
      document.querySelector('main')?.scrollIntoView()
    </script>
    <CurrentLinkHighlight />
    <HeadingCopyButton />
    <Glitch />
    <script client>
      if (import.meta.env.PROD) {
        requestAnimationFrame(async () => {
          await navigator.serviceWorker
            ?.register('/sw.js')
            .then((registration) => registration.update())
            .catch(() => null)

          // console.log('client ready')

          const broadcast = new BroadcastChannel('sw')
          broadcast.postMessage({ type: 'client-ready' })
          broadcast.onmessage = ({ data, source }) => {
            // console.log('client message')
            if (
              data?.type === 'hot-update' &&
              location.pathname === new URL(data.url).pathname
            ) {
              source?.postMessage({ type: 'hot-update-received' })

              const doc = new DOMParser().parseFromString(
                data.text,
                'text/html',
              )
              const newMain = doc.querySelector('main')
              const main = document.querySelector('main')

              if (!newMain || newMain.innerHTML === main.innerHTML) {
                // console.log('cliens mains is equal')
                return
              }

              // console.log('cliens mains is not equal')

              // TODO show toast?
              main.replaceWith(newMain)
            }
          }
        })
      }
    </script>
    <script defer src="/_vercel/insights/script.js"></script>
  </body>
</html>
